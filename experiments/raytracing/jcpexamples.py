'''
Created on Nov 18, 2011

@author: joel
'''
import pypwdg.core.bases as pcb
import pypwdg.core.bases.variable as pcbv
import pypwdg.core.bases.reference as pcbr
import pypwdg.core.boundary_data as pcbd
import pypwdg.setup.problem as psp
import pypwdg.setup.computation as psc
import pypwdg.core.physics as pcp
import pypwdg.output.solution as pos
import pypwdg.output.mploutput as pom
import pypwdg.test.utils.mesh as tum
import numpy as np
import math
import random
import matplotlib.pyplot as mp
import string
import pypwdg.utils.quadrature as puq
import pypwdg.adaptivity.planewave as pap

class harmonic1():
    ''' Harmonic function s * ((x+t)^2 - (y+t)^2), with s and t chosen such that the gradient has length 1 at (0,0) and self.scale at (1,1)''' 
    
    def __init__(self, scale):
        self.s = (scale - 1) / (2*math.sqrt(2))
        self.t = 1/(2 * math.sqrt(2)*self.s)
        
    def values(self, x):
        return ((x[:,0]+self.t)**2 - (x[:,1]+self.t)**2).reshape(-1,1)*self.s
    def gradient(self, x):
        return (x+[self.t,self.t]) * [2,-2] *self.s

class NormOfGradient():
    def __init__(self, S):
        self.S = S

    def __call__(self, x):
        return np.sqrt(np.sum(self.S.gradient(x)**2, axis=1))

class HarmonicDerived(pcb.Basis):
    def __init__(self, k, S):
        self.k = k
        self.S = S
        
    def values(self, x):
        return np.exp(1j * self.k * self.S.values(x))

    def derivs(self, x, n=None):
        if n is None:
            return (self.S.gradient(x) * self.values(x))[:,np.newaxis,:]
        else:
            return np.dot(self.S.gradient(x), n)[:,np.newaxis] * self.values(x)
    
    def laplacian(self, x):
        return -self.k**2 * self.values(x)

class PlaneWaveFromDirectionsRule(object):
    
    def __init__(self, S, err = 0):
        self.S = S
        self.err = err
        
    def populate(self, einfo):
        import pypwdg.core.bases.definitions as pcbb
        dir = self.S.gradient(einfo.origin)
        M = np.eye(2) + np.array([[0,1],[-1,0]]) * self.err * 2 * (random.random() - 1/2)
        dir = np.dot(M, dir)
        dir = dir / math.sqrt(np.sum(dir**2))    
        return [pcbb.PlaneWaves(dir,einfo.k)]

def variableNhConvergence(Ns, nfn, bdycond, basisrule, process, k = 20, scale = 4.0, pdeg = 1):
    #bnddata={bdytag:pcbd.generic_boundary_data([-1j*k,1],[-1j*k,1],g=g)}
    bdytag = "BDY"    
    bnddata={bdytag:bdycond}
    entityton ={1:nfn}
    for n in Ns:
        mesh = tum.regularsquaremesh(n, bdytag)
        alpha = ((pdeg*1.0)**2 * n)  / k
        beta = k / (pdeg * 1.0*n) 
        problem=psp.VariableNProblem(entityton, mesh,k, bnddata)
        computation = psc.Computation(problem, basisrule, pcp.HelmholtzSystem, 15, alpha = alpha, beta = beta)
        solution = computation.solution(psc.DirectSolver().solve, dovolumes=True)
        process(n, solution)
        
class FileOutput():
    
    def __init__(self, name, ns, g, bounds, npoints):
        self.ftxt = open(name + ".txt", 'a')
        self.ftxt.write(name.translate(None, string.punctuation + string.whitespace)+' = (')
        self.ftxt.write(str(ns)+", [")
        self.bounds = bounds
        self.npoints = npoints
        self.g = g
        self.docomma = False
    
    def process(self, n, solution):
        err = pos.comparetrue(self.bounds, self.npoints, self.g, solution)
        print n, err
        if self.docomma: self.ftxt.write(', ')
        self.docomma = True
        self.ftxt.write(str(err))
        
    def __del__(self):
        self.ftxt.write('])')
    

def genNs(base, minN, maxN):
    a = math.log(minN) / math.log(base)
    b = math.log(maxN) / math.log(base)
    return list(sorted(set(np.array(base**np.arange(a,b),dtype=int))))

def analytichconvergence(maxN, k = 20, scale = 4.0):    
    fileroot = "hconv.k%s.scale%s"%(k,scale)
    bounds=np.array([[0,1],[0,1]],dtype='d')
    npoints=np.array([k * scale * 10,k * scale * 10], dtype=int)
    S = harmonic1(scale)
    g = HarmonicDerived(k, S)   
    nfn = NormOfGradient(S)
    bdycond = pcbd.dirichlet(g)
    
    npw = 15
    pdeg = 2
    Ns = genNs(math.pow(2,1.0/3),1,maxN+1)
    
    pw = pcbv.PlaneWaveVariableN(pcb.circleDirections(npw))
    fo = FileOutput(fileroot + 'uniformpw%s'%npw, str(Ns), g, bounds, npoints)
    variableNhConvergence(Ns, nfn, bdycond, pw, fo.process, k, scale)
    
    poly = pcbr.ReferenceBasisRule(pcbr.Dubiner(pdeg))
    fo = FileOutput(fileroot + 'poly%s'%pdeg, str(Ns), g, bounds, npoints)
    variableNhConvergence(Ns, nfn, bdycond, poly, fo.process, k, scale, pdeg)

    for err in [0, 0.02, 0.2]:
        rt = PlaneWaveFromDirectionsRule(S, err)
        fo = FileOutput(fileroot + 'rt-err%s'%err, str(Ns), g, bounds, npoints)
        variableNhConvergence(Ns, nfn, bdycond, rt, fo.process, k, scale)
        for p in [1,2,3,4]:
            poly = pcbr.ReferenceBasisRule(pcbr.Dubiner(p))
            polyrt = pcb.ProductBasisRule(poly, rt)
            fo = FileOutput(fileroot + 'poly%srt-err%s'%(p,err), str(Ns), g, bounds, npoints)
            variableNhConvergence(Ns, nfn, bdycond, polyrt, fo.process, k, scale, p)

def analyticconvergencepwprod(maxN, k = 20, scale = 4.0):
    fileroot = "hconv.k%s.scale%s"%(k,scale)
    bounds=np.array([[0,1],[0,1]],dtype='d')
    npoints=np.array([k * scale * 10,k * scale * 10], dtype=int)
    S = harmonic1(scale)
    g = HarmonicDerived(k, S)   
    nfn = NormOfGradient(S)
    bdycond = pcbd.dirichlet(g)
    
    npw = 15
    Ns = genNs(math.pow(2,1.0/2),1,maxN+1)

    
    pw = pcbv.PlaneWaveVariableN(pcb.circleDirections(npw))
    
    for p in [1,2,3,4]:
        poly = pcbr.ReferenceBasisRule(pcbr.Dubiner(p))
        polypw = pcb.ProductBasisRule(poly, pw)
        fo = FileOutput(fileroot + 'pw%spoly%s'%(npw,p), str(Ns), g, bounds, npoints)
        variableNhConvergence(Ns, nfn, bdycond, polypw, fo.process, k, scale, p)

def showtruesoln(k, scale):
    S = harmonic1(scale)
    g = HarmonicDerived(k, S)   
    bounds=np.array([[0,1],[0,1]],dtype='d')
    npoints=np.array([k * scale * 10,k * scale * 10], dtype=int)
    pom.output2dfn(bounds, g.values, npoints)

#hconv.k20.scale4.0poly1rt-err0.02.txt
#hconv.k20.scale4.0poly1rt-err0.2.txt
#hconv.k20.scale4.0poly1rt-err0.txt
#hconv.k20.scale4.0poly2rt-err0.02.txt
#hconv.k20.scale4.0poly2rt-err0.2.txt
#hconv.k20.scale4.0poly2rt-err0.txt
#hconv.k20.scale4.0poly2.txt
#hconv.k20.scale4.0poly3rt-err0.02.txt
#hconv.k20.scale4.0poly3rt-err0.2.txt
#hconv.k20.scale4.0poly3rt-err0.txt
#hconv.k20.scale4.0poly4rt-err0.02.txt
#hconv.k20.scale4.0poly4rt-err0.2.txt
#hconv.k20.scale4.0poly4rt-err0.txt
#hconv.k20.scale4.0rt-err0.02.txt
#hconv.k20.scale4.0rt-err0.2.txt
#hconv.k20.scale4.0rt-err0.txt
#hconv.k20.scale4.0uniformpw15.txt

# For n = [1:33]
hconvk20scale40poly1rterr002 = [0.988075493534, 1.04606407285, 0.731380877182, 0.613963391608, 0.507235907393, 0.460383803892, 0.396313962727, 0.336264784718, 0.288451305799, 0.256075303171, 0.194429509735, 0.170626190084, 0.152366300435, 0.136960181619, 0.123990871921, 0.112432978769, 0.102750975635, 0.0944559537411, 0.0871026697206, 0.0817343409096, 0.0358137108013, 0.0325167115127, 0.0297956485015, 0.0274183730386, 0.0252416026769, 0.0233710180946, 0.021658697429, 0.0201457498914, 0.0188309034042, 0.0150664681738, 0.0141394299442, 0.0132768686897]
hconvk20scale40poly1rterr02 = [1.00544176714, 1.03288031303, 1.0319589528, 0.882505651826, 0.839299702249, 0.648856315054, 0.586681651108, 0.448982959654, 0.368174763216, 0.380707794313, 0.274742627667, 0.224782826205, 0.192356388626, 0.174687513033, 0.148280676512, 0.150823408461, 0.138646830979, 0.12624268976, 0.117232599319, 0.111632525442, 0.0492116785032, 0.0415481027436, 0.0413232975265, 0.0401432628062, 0.0338040817771, 0.032874179937, 0.0277785064976, 0.027091301759, 0.0260654255166, 0.0221373786123, 0.0199851770021, 0.0190749552833]
hconvk20scale40poly1rterr0 = [0.987532409157, 1.04206441222, 0.739390889745, 0.576799984165, 0.488564673791, 0.453932609528, 0.393158663328, 0.335628784007, 0.289422985654, 0.257784186701, 0.196064983653, 0.172548079484, 0.153474411161, 0.137840704906, 0.124532118317, 0.113119285271, 0.103181501064, 0.0948119707219, 0.087330615352, 0.0816749277, 0.0356014546907, 0.0324239887418, 0.0296902080914, 0.0272891437657, 0.0251597355527, 0.0233029304947, 0.0216320480472, 0.020139852141, 0.0187917053061, 0.0150489584608, 0.0141069784957, 0.0132282261069]
hconvk20scale40poly2rterr002 = [0.97505756204, 0.704632792529, 0.242282009232, 0.070922473679, 0.0268831969517, 0.0154004588795, 0.00832695642781, 0.00508171851857, 0.0037092683764, 0.00248608380368, 0.00103938004517, 0.00104033826482, 0.000745511919561, 0.00047143605701, 0.000442337134465, 0.000386393216693, 0.000271327101397, 0.000257526913057, 0.000210203779423, 0.00128326885828, 0.00156917878224, 0.000919835553635, 0.00175830426156, 0.00154742644561, 0.00137216803911, 0.000817118225309, 0.000740867473978, 0.000777462853455, 0.00215054181435, 5.2403585508e-05, 4.63096730003e-05, 4.16489078861e-05]
hconvk20scale40poly2rterr02 = [0.985294092702, 0.930084181922, 0.559272549225, 0.459428663071, 0.362927361369, 0.160934211483, 0.0865065721142, 0.0480489016565, 0.0388564604427, 0.0252951482615, 0.0166586700184, 0.0123205623381, 0.0130208162478, 0.00638605257759, 0.00785223870429, 0.00622680334455, 0.00428517763456, 0.0043681140881, 0.00316558713903, 0.036312780406, 0.0397223530995, 0.0665530187629, 0.0248270960871, 0.0263803346064, 0.0286397390784, 0.0217324930371, 0.00496881940324, 0.0315217299586, 0.00681849498566, 0.000932907575027, 0.000853194865495, 0.000674202551479]
hconvk20scale40poly2rterr0 = [0.974897190491, 0.702139351347, 0.257724089052, 0.0780158899997, 0.0284915740167, 0.0126744574838, 0.00719759733007, 0.0045305469413, 0.00305177654155, 0.00193012257306, 0.00073472055871, 0.000530409832675, 0.000383396067703, 0.000278193336102, 0.000203940511906, 0.000151127825006, 0.000112735531564, 8.54160559296e-05, 6.51860474647e-05, 0.000335796958774, 0.000162219474515, 0.000126923469629, 0.000263180342252, 0.000404957724078, 9.28474934789e-05, 5.26131315805e-05, 0.0125675547488, 4.86821855208e-05, 3.0354057239e-05, 8.0402320648e-06, 6.84397057641e-06, 5.89003158487e-06]
hconvk20scale40poly2 = [1.00006424779, 0.999965964977, 0.999530811123, 0.997768741606, 0.996203005483, 0.989822583585, 0.982043192275, 0.969503017618, 0.959960113899, 0.948038357023, 0.854340269925, 0.769158467678, 0.704736341843, 0.634945677117, 0.568241206585, 0.50829991643, 0.452984541207, 0.419610571557, 0.387700923915, 3.04768548966, 1.10318025833, 0.839837863463, 1.17429989191, 1.07914883631, 1.17553116577, 0.769470102089, 0.771927879868, 24.6157804193, 0.83822978622, 0.092744371541, 0.0813227130598, 0.0728715944668]
hconvk20scale40poly3rterr002 = [1.047226336, 1.48258043083, 0.158369646883, 0.0489838521331, 0.0240096742971, 0.0128785948625, 0.00457257325006, 0.00281257384299, 0.00197483955285, 0.00130507237894, 0.00092656837135, 0.00061288247964, 0.000393368883496, 0.000295978503847, 0.000178222445862, 0.000108057231104, 7.39420387269e-05, 5.3162852023e-05, 3.8784623917e-05, 3.3484071334e-05, 2.3267123642e-05, 1.6266515525e-05, 1.22863703241e-05, 9.86563925177e-06, 8.310768859e-06, 7.03034920692e-06, 6.09283408751e-06, 5.35216244229e-06, 4.97032292214e-06, 1.11991059968e-05, 7.89052672658e-06, 1.35614578195e-05]
hconvk20scale40poly3rterr02 = [1.04106142036, 1.51410791339, 0.288906849315, 0.103130260312, 0.0563129866727, 0.0258538628464, 0.00893800788616, 0.0055857599392, 0.00432235111846, 0.0032987773047, 0.00302245627662, 0.00201330926169, 0.00106717568766, 0.000753891315619, 0.000429245990616, 0.000355441605902, 0.000253376499795, 0.000184685590707, 0.00018130313369, 0.000137379836952, 0.000168416585858, 9.14344543419e-05, 8.28748096619e-05, 8.33864991737e-05, 6.4177140191e-05, 5.26879210473e-05, 4.71458569396e-05, 3.98359670206e-05, 4.42778779875e-05, 0.00082983688175, 0.000578060488411, 0.000802717234996]
hconvk20scale40poly3rterr0 = [1.04610248525, 1.52572052857, 0.150091981949, 0.0484721679596, 0.0238012722465, 0.0127977888398, 0.00453073208096, 0.00283678196498, 0.00200064578059, 0.00132141281809, 0.000930206106128, 0.00060291359, 0.000391891003746, 0.000296553486187, 0.000178253931958, 0.000108652555603, 7.42647093307e-05, 5.32221502592e-05, 3.87776968273e-05, 3.30017377518e-05, 2.28357906543e-05, 1.6065376025e-05, 1.22067414318e-05, 9.83670333847e-06, 8.26039538044e-06, 7.0040394274e-06, 6.01677257417e-06, 5.31165409705e-06, 4.90029864823e-06, 5.41331737757e-06, 7.08444562886e-06, 1.84222603838e-05]
hconvk20scale40poly4rterr002 = [1.05685851351, 0.641615389877, 0.0165269404843, 0.00225792889107, 0.000556258315135, 0.000248456820013, 0.00020210297212, 0.000114754158136, 5.48057923282e-05, 3.05227249747e-05, 1.55073123348e-05, 1.17260527629e-05, 6.06239415563e-06, 8.61953593505e-06, 4.63126063448e-06, 2.31961311255e-06, 1.42356289897e-06, 8.81472209038e-07, 9.76515888483e-07, 7.95110255093e-07, 4.05550051402e-07, 2.66270118525e-07, 2.19361774204e-07, 1.1170316688e-07, 1.10429034153e-07, 5.92129042517e-08, 6.28899544178e-08, 5.12857517265e-08, 3.52172878012e-08, 3.44369383515e-08, 2.43698893645e-08, 1.91656849571e-08]
hconvk20scale40poly4rterr02 = [1.01264314701, 0.367479751994, 0.0434359918975, 0.0179553958501, 0.010907593419, 0.00224305285595, 0.00145860767872, 0.00108386508026, 0.000611202101243, 0.000388421117444, 0.000237085490014, 0.000144954560078, 0.000131611850067, 0.000125803468012, 7.00828360105e-05, 3.80714911835e-05, 4.32653448358e-05, 3.30347505364e-05, 3.19014238375e-05, 9.34118403628e-06, 9.55939061938e-06, 8.51978893486e-06, 6.88146232174e-06, 3.77939105336e-06, 4.89562907043e-06, 1.87605228013e-06, 2.45415014268e-06, 1.5487833251e-06, 1.10496045268e-06, 1.06162569478e-06, 8.69301537965e-07, 4.77765732199e-07]
hconvk20scale40poly4rterr0 = [1.05599005663, 0.601878255471, 0.0175997204972, 0.00242706375973, 0.000530160158474, 0.000194407771856, 0.000174523139353, 6.37614495795e-05, 1.73401273869e-05, 7.64864621426e-06, 3.66447645093e-06, 1.76212493531e-06, 1.32798581818e-06, 1.5207773898e-06, 6.52507528173e-07, 2.87880062227e-07, 2.4139620277e-07, 1.74554621923e-07, 1.39977064132e-07, 1.11598480529e-07, 8.09018161475e-08, 5.60245137274e-08, 4.05726901687e-08, 3.05784981767e-08, 2.36794882699e-08, 1.87225503758e-08, 1.50313336346e-08, 1.22180826803e-08, 1.00308589681e-08, 7.55212357379e-09, 6.30107022053e-09, 5.29351415802e-09]
hconvk20scale40rterr002 = [1.00023156614, 0.999783376509, 0.998726481961, 0.987205717008, 0.95303639647, 0.840911470515, 0.617810641484, 0.506382238765, 0.414088800526, 0.346832393759, 0.202573946266, 0.192198503885, 0.175029391316, 0.16560409156, 0.160662361024, 0.152943251113, 0.142318827374, 0.137792102394, 0.131375778742, 0.117201206674, 0.0583437923813, 0.0497895984859, 0.0518263624874, 0.0479649779704, 0.0485838785042, 0.0495806503772, 0.0426621022934, 0.0447567440148, 0.0421948912675, 0.0382420913393, 0.0364924149657, 0.0371983077372]
hconvk20scale40rterr02 = [1.00112865436, 0.999888077009, 0.992499165455, 0.986802541119, 0.996206188152, 0.960664301421, 0.908939589071, 0.915631727254, 0.881596287048, 0.823016171877, 0.683455149955, 0.660949879549, 0.662984088109, 0.645324689422, 0.654378092562, 0.606301441048, 0.618352051926, 0.593689386881, 0.610322064102, 0.705905691084, 0.498611146628, 0.534926975817, 0.513788463205, 0.49952451073, 0.507534877737, 0.483103249664, 0.473926509442, 0.478685314963, 0.455250272131, 0.356365097279, 0.35177479345, 0.363707978626]
hconvk20scale40rterr0 = [0.999987947157, 0.999998243788, 0.99850057329, 0.989662569924, 0.952803677277, 0.840775418124, 0.610072102126, 0.497292152148, 0.408946876196, 0.329925406119, 0.189218851085, 0.173474753665, 0.161267145879, 0.151598432197, 0.143327395138, 0.136142826347, 0.130102114467, 0.124727529845, 0.119968427108, 0.0896933941794, 0.0216660076706, 0.0209409801324, 0.0203171163003, 0.0197625968015, 0.0192419442249, 0.0187922230026, 0.0183641155357, 0.0179705692921, 0.0175957703315, 0.0199010174456, 0.0195051442036, 0.0191096663192]
hconvk20scale40uniformpw15 = [1.01542992553, 1.04412459678, 1.02168788909, 1.05898804559, 1.02481743095, 0.87615981089, 0.56603134255, 0.437172745421, 0.347986988994, 0.505004331361, 0.304868113879, 0.190412878065, 0.252257898872, 0.240303778738, 0.183860274809, 0.147640313469, 0.135971603664, 0.141889388362, 0.134785614261, 0.0802132084086, 0.0224535191263, 0.0178219300225, 0.0144556270517, 0.0119549714192, 0.0100461647014, 0.0085463318044, 0.00735003132759, 0.00637700206385, 0.00557506495846, 0.00530473334716, 0.00468081543422, 0.00415430655205]



# with alpha=beta = 0.5
#hconvk20scale40poly1rterr002 = [0.986718631153, 1.02431231616, 0.819760370047, 0.669048358688, 0.529358279946, 0.414762895219, 0.326324747597, 0.26274363575, 0.215249498698, 0.179797119802, 0.152452696576, 0.131685039852, 0.114596072113, 0.10087715005, 0.0897943277602, 0.0801144125555, 0.0720988797797, 0.0655521426627, 0.0596638723741, 0.0545372834254, 0.0501171453939, 0.0462169109135, 0.0427448816453, 0.0396228331401, 0.0368946447449, 0.0344107722244, 0.032151630389, 0.0301099437134, 0.0282505853756, 0.0265490191018]
#hconvk20scale40poly1rterr02 = [1.00235177663, 1.01827817952, 0.849305713281, 0.724092898986, 0.641932489933, 0.516457940263, 0.403623585722, 0.331350590137, 0.254221100519, 0.24820096668, 0.219145517476, 0.176730825957, 0.166950132527, 0.149935678785, 0.129007986501, 0.112136417182, 0.0994271582684, 0.0866052526933, 0.0864234110393, 0.0801459930825, 0.0715112541347, 0.0655818795464, 0.0589776021917, 0.0590393679598, 0.050027183139, 0.0540603016866, 0.0491395319227, 0.0470076620818, 0.0410379895199, 0.0421745552671]
#hconvk20scale40poly1rterr0 = [0.984736706182, 1.02012439689, 0.824563642078, 0.666966901158, 0.526840404383, 0.412835587336, 0.326417092817, 0.26245191646, 0.215088699273, 0.179484971086, 0.152306991433, 0.131092837831, 0.114188116044, 0.10059871374, 0.0893162634522, 0.0798753823714, 0.0718891165243, 0.0652562496375, 0.059493075124, 0.054326729356, 0.0499989070112, 0.0460298158059, 0.0425664986629, 0.0394889881187, 0.0366715474775, 0.0342192775655, 0.0319609054571, 0.0299245340108, 0.0280556402353, 0.026350597984]
#hconvk20scale40poly2rterr002 = [0.961311122933, 0.619297766794, 0.19776268269, 0.0568021760024, 0.0234102869359, 0.0127826554462, 0.00789814871605, 0.00483832081309, 0.00328419542386, 0.00239639817892, 0.00167664269513, 0.00146765719406, 0.00110152219086, 0.00089119810683, 0.000655189131459, 0.000567178697442, 0.000480592833551, 0.000383583310452, 0.000300040848262, 0.00029890510672, 0.000231541840414, 0.000167673674443, 0.000157886420123, 0.0001307700506, 0.000106366632221, 0.000109877315759, 9.68108042438e-05, 7.24030486477e-05, 7.63869128318e-05, 7.05471325202e-05]
#hconvk20scale40poly2rterr02 = [0.978804984817, 0.78294452048, 0.55414155838, 0.209075465027, 0.153293814783, 0.0965181772538, 0.0790706536018, 0.050050553891, 0.0268580511206, 0.0144996062566, 0.0137778125414, 0.0114939175037, 0.0118613704784, 0.00912389371826, 0.00853599438904, 0.00623443433708, 0.00595067852184, 0.00525416519509, 0.00393354560593, 0.00297289845612, 0.00231363881394, 0.00241392081504, 0.00220839486814, 0.00183346450931, 0.00147261226445, 0.00158038598324, 0.00107509575631, 0.00109071949814, 0.000998898416217, 0.00121689588723]
#hconvk20scale40poly2rterr0 = [0.962184584664, 0.628605368182, 0.22294372822, 0.0694507646956, 0.0278020528692, 0.0139204109611, 0.00798249944225, 0.00500352569819, 0.00334870592801, 0.00235589994485, 0.00171759274245, 0.00128538777812, 0.000982337354838, 0.000763496300713, 0.000601920035434, 0.000480288010924, 0.00038658132396, 0.000315205343867, 0.000258613178778, 0.000213585064668, 0.000177582865523, 0.000148461658277, 0.000124865982903, 0.000105481506604, 8.96346733879e-05, 7.65666947776e-05, 6.56694276638e-05, 5.65871834598e-05, 4.8977172096e-05, 4.25341272874e-05]
#hconvk20scale40poly2 = [1.00009132774, 1.00038459476, 0.99867289773, 0.995436863541, 0.992512587576, 0.986430485286, 0.976426577622, 0.966268114922, 0.956196171222, 0.94862816667, 0.944595831899, 0.92641859722, 0.89716439363, 0.858130970834, 0.82451404053, 0.775989558857, 0.738414097227, 0.700843908481, 0.664090943518, 0.62968494281, 0.5942555701, 0.556791503149, 0.518073852486, 0.479711265657, 0.442704443493, 0.407600701793, 0.374694504391, 0.34425157401, 0.316237878704, 0.290543730736]
#hconvk20scale40poly3rterr002 = [0.964071958879, 0.663357419989, 0.13305867797, 0.048099246045, 0.0218173777655, 0.011210225902, 0.00660310357025, 0.00418463904358, 0.00295735022113, 0.002026357685, 0.00148897802174, 0.00109025981049, 0.000798555982405, 0.000579783585043, 0.000417865877135, 0.000305031198255, 0.000221563460423, 0.000164697484271, 0.000126429459461, 9.97312136382e-05, 8.04793599098e-05, 6.62833076175e-05, 5.61103910364e-05, 4.8250955658e-05, 4.18709592622e-05, 3.61165187129e-05, 3.13010454443e-05, 2.72545807308e-05, 2.39783223667e-05, 2.11914433879e-05]
#hconvk20scale40poly3rterr02 = [1.00288938392, 1.03514129412, 0.340910723722, 0.101848436735, 0.0394375836517, 0.02160926137, 0.0119279394485, 0.00722746165434, 0.00646731668034, 0.00371211357837, 0.00275994395905, 0.00183733181877, 0.00159457411067, 0.00118145523501, 0.000927828024353, 0.000708529000382, 0.000401978264165, 0.000405344888315, 0.000259299279127, 0.0002277585248, 0.000187254405879, 0.000149702548815, 0.000165977237237, 0.000125008324818, 0.000128647175806, 8.44974598035e-05, 9.68873695201e-05, 6.84915870968e-05, 7.63780397587e-05, 5.18473594082e-05]
#hconvk20scale40poly3rterr0 = [0.962550032403, 0.654907043047, 0.132937360945, 0.0479181540164, 0.0217688345836, 0.0112362900653, 0.00656984341615, 0.00418072330531, 0.002963000742, 0.00202107967775, 0.00148484823686, 0.00108121574827, 0.000791423233056, 0.000574032016604, 0.000414114501904, 0.000302092435721, 0.000219877492388, 0.000164186887795, 0.000126113420315, 9.9693697154e-05, 8.03455316692e-05, 6.63306122215e-05, 5.61322345508e-05, 4.83128110885e-05, 4.1803904894e-05, 3.60764257116e-05, 3.12314564617e-05, 2.72275961544e-05, 2.3913323322e-05, 2.11522217602e-05]
#hconvk20scale40poly4rterr002 = [1.10444863505, 0.357437886164, 0.0137793068407, 0.00196705244754, 0.000593979163731, 0.000227151735471, 0.000151834283235, 0.000125389079606, 7.52725796109e-05, 4.84708384458e-05, 2.4994108069e-05, 1.90585131584e-05, 1.39405287984e-05, 1.3243847944e-05, 9.56022033815e-06, 3.32274066942e-06, 2.23385851041e-06, 1.78040858554e-06, 1.59862897027e-06, 1.2330366981e-06, 1.27215292084e-06, 7.88309462337e-07, 9.16269797462e-07, 4.2937900031e-07, 4.70865268616e-07, 2.27960526598e-07, 1.69154575187e-07, 1.59124125668e-07, 1.20325523803e-07, 8.31413885715e-08]
#hconvk20scale40poly4rterr02 = [0.960796420412, 0.265470189116, 0.0693487982421, 0.0284865370698, 0.0111665821844, 0.00475236672442, 0.00186848273799, 0.00236696068815, 0.00113226671769, 0.000618584185227, 0.000514985581089, 0.000281995182661, 0.000224492989694, 0.000183464433542, 0.000116485337285, 7.01824501236e-05, 4.77547462219e-05, 3.9963440057e-05, 1.88066996269e-05, 2.54905272839e-05, 2.51456867128e-05, 3.76173894575e-05, 1.9594654021e-05, 1.12514732191e-05, 9.11527862105e-06, 6.55894237253e-06, 4.89571769257e-06, 2.22735664301e-06, 2.52956910528e-06, 2.01409942944e-06]
#hconvk20scale40poly4rterr0 = [1.09660255646, 0.352210571394, 0.0147823767407, 0.00228856564452, 0.000576260826328, 0.000207553856035, 0.000104384143817, 5.25396169664e-05, 2.69600608017e-05, 1.50674384959e-05, 7.21803632037e-06, 4.95219169142e-06, 2.82132988427e-06, 2.45965633644e-06, 1.45664815947e-06, 7.50154587685e-07, 5.88182191624e-07, 4.24518774911e-07, 2.74495483128e-07, 1.95191318333e-07, 1.67943997933e-07, 1.56924769404e-07, 1.20608856307e-07, 8.14179521642e-08, 5.68520884266e-08, 4.17330177007e-08, 3.1767018024e-08, 2.47927471096e-08, 1.97061751305e-08, 1.58807303073e-08]
#hconvk20scale40rterr002 = [0.998016012868, 0.999739754268, 0.849675625999, 0.655722684256, 0.422456510488, 0.305273605655, 0.246414355861, 0.196087807737, 0.165343783477, 0.155664173633, 0.130235236558, 0.129093361369, 0.122112760013, 0.115579818594, 0.107208423762, 0.101327445547, 0.0968750925498, 0.092493515824, 0.0932701106994, 0.0887926224314, 0.0842979660974, 0.0800276748719, 0.0797225737358, 0.0765756227226, 0.0697081403632, 0.0708557653179, 0.0660323098457, 0.0686342226033, 0.063797710626, 0.0637175924136]
#hconvk20scale40rterr02 = [1.01417952281, 0.958109874908, 0.957452399545, 0.880411190434, 0.84758688276, 0.877596804555, 0.698341530601, 0.756702675992, 0.680731511076, 0.650371404235, 0.669770620697, 0.616473363189, 0.606975663719, 0.571957756551, 0.558324480294, 0.557754394576, 0.545508191375, 0.513147143565, 0.49293790749, 0.514311898207, 0.496161615422, 0.456186471978, 0.483143264267, 0.464132846404, 0.472795028289, 0.447723653567, 0.465264400112, 0.438352305682, 0.420823430222, 0.44512858164]
#hconvk20scale40rterr0 = [0.992913936668, 1.00119415164, 0.866514175148, 0.632957391559, 0.431015462296, 0.301012277585, 0.22388216418, 0.177942013733, 0.149611086905, 0.131057240211, 0.118219782374, 0.108723497096, 0.10131887697, 0.0954205313417, 0.0903470956627, 0.0859289038125, 0.0821792090078, 0.0788631484759, 0.0759083041998, 0.0729999182647, 0.0706310229168, 0.0682302463688, 0.0660581499781, 0.0640912138643, 0.062138453166, 0.0604446042903, 0.0588051093013, 0.0572707457044, 0.0558014496598, 0.0544082644765]
#hconvk20scale40uniformpw15 = [1.0234037976, 1.0955093305, 1.09411538088, 1.33408673069, 1.08139693632, 0.640342896836, 0.473668316911, 0.37977156001, 0.262282538183, 0.243985753093, 0.164647135621, 0.155424600351, 0.0980139230503, 0.162918896495, 0.0777292963231, 0.0751822767676, 0.0692256718352, 0.0632265437212, 0.0595292852917, 0.0556402573117, 0.0513264293981, 0.0468186644961, 0.0423405275195, 0.0381115849409, 0.0341970075962, 0.0306254638823, 0.027444639522, 0.0246250034439, 0.0221418757447, 0.0199569487429]

def plotanalytic():
    h = 1.0 / np.arange(1, 33)
    mp.loglog(h, hconvk20scale40uniformpw15)
    mp.figure()
    mp.loglog(h, hconvk20scale40poly2)
    mp.figure()
    mp.loglog(h, np.transpose([hconvk20scale40rterr0, hconvk20scale40poly1rterr0, hconvk20scale40poly2rterr0, hconvk20scale40poly3rterr0, hconvk20scale40poly4rterr0]))
    mp.figure()
    mp.loglog(h, np.transpose([hconvk20scale40rterr02, hconvk20scale40poly1rterr02, hconvk20scale40poly2rterr02, hconvk20scale40poly3rterr02, hconvk20scale40poly4rterr02]))
    mp.figure()
    mp.loglog(h, np.transpose([hconvk20scale40rterr002, hconvk20scale40poly1rterr002, hconvk20scale40poly2rterr002, hconvk20scale40poly3rterr002, hconvk20scale40poly4rterr002]))
    mp.figure()
    mp.loglog(h, np.transpose([hconvk20scale40poly2rterr0, hconvk20scale40poly2rterr002, hconvk20scale40poly2rterr02]))

class GaussianBubble:
    def __init__(self, c = 1, O = [0.5,0.3]):
        self.c = c
        self.O = O
    
    def __call__(self,x):
        r2 = np.sum((x - self.O)**2, axis=1)                
        return 1.0 / ((1- np.exp(-32*r2)/2) * self.c)


def pwproduniform(g, qxw, k, n):
    theta = np.linspace(0, 2*math.pi, n, endpoint=False)
    return (theta,)+ pap.L2Prod(g, qxw, k).products(theta)

    
def microlocal():
    N = 20
    k = 20    
    qxw = puq.squarequadrature(N)
    g = pcb.BasisReduce(pcb.BasisCombine([pcb.FourierHankel([-1,-0.5], [0], k), pcb.FourierHankel([-0.2,0.5], [0], k)]), [1,1])
    theta, proj, projd, projdd = pwproduniform(g.values, qxw, k, 500)
    mp.plot(theta, proj[0])
    

import pypwdg.parallel.main



if __name__ == '__main__':
    pass    
    analytichconvergence(60)
    analyticconvergencepwprod(12)
    #showtruesoln(20,4.0)
    
    #plotanalytic()
    #microlocal()
    
    
    
    