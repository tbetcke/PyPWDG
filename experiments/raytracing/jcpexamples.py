'''
Created on Nov 18, 2011

@author: joel
'''
import pypwdg.core.bases as pcb
import pypwdg.core.bases.variable as pcbv
import pypwdg.core.bases.reference as pcbr
import pypwdg.core.boundary_data as pcbd
import pypwdg.setup.problem as psp
import pypwdg.setup.computation as psc
import pypwdg.core.physics as pcp
import pypwdg.output.solution as pos
import pypwdg.output.mploutput as pom
import pypwdg.test.utils.mesh as tum
import numpy as np
import math
import time
import random
import matplotlib.pyplot as mp
import string


class harmonic1():
    ''' Harmonic function s * ((x+t)^2 - (y+t)^2), with s and t chosen such that the gradient has length 1 at (0,0) and self.scale at (1,1)''' 
    
    def __init__(self, scale):
        self.s = (scale - 1) / (2*math.sqrt(2))
        self.t = 1/(2 * math.sqrt(2)*self.s)
        
    def values(self, x):
        return ((x[:,0]+self.t)**2 - (x[:,1]+self.t)**2).reshape(-1,1)*self.s
    def gradient(self, x):
        return (x+[self.t,self.t]) * [2,-2] *self.s

class NormOfGradient():
    def __init__(self, S):
        self.S = S

    def __call__(self, x):
        return np.sqrt(np.sum(self.S.gradient(x)**2, axis=1))

class HarmonicDerived(pcb.Basis):
    def __init__(self, k, S):
        self.k = k
        self.S = S
        
    def values(self, x):
        return np.exp(1j * self.k * self.S.values(x))

    def derivs(self, x, n=None):
        if n is None:
            return (self.S.gradient(x) * self.values(x))[:,np.newaxis,:]
        else:
            return np.dot(self.S.gradient(x), n)[:,np.newaxis] * self.values(x)
    
    def laplacian(self, x):
        return -self.k**2 * self.values(x)

class PlaneWaveFromDirectionsRule(object):
    
    def __init__(self, S, err = 0):
        self.S = S
        self.err = err
        
    def populate(self, einfo):
        import pypwdg.core.bases.definitions as pcbb
        dir = self.S.gradient(einfo.origin)
        M = np.eye(2) + np.array([[0,1],[-1,0]]) * self.err * random.random()
        dir = np.dot(M, dir)
        dir = dir / math.sqrt(np.sum(dir**2))    
        return [pcbb.PlaneWaves(dir,einfo.k)]

def variableNhConvergence(Ns, nfn, bdycond, basisrule, process, k = 20, scale = 4.0, pdeg = 1):
    #bnddata={bdytag:pcbd.generic_boundary_data([-1j*k,1],[-1j*k,1],g=g)}
    bdytag = "BDY"    
    bnddata={bdytag:bdycond}
    entityton ={1:nfn}
    for n in Ns:
        mesh = tum.regularsquaremesh(n, bdytag)
        alpha = pdeg ^2 * n  / k
        beta = k / (pdeg * n) 
        problem=psp.VariableNProblem(entityton, mesh,k, bnddata)
        computation = psc.Computation(problem, basisrule, pcp.HelmholtzSystem, 15, alpha = alpha, beta = beta)
        solution = computation.solution(psc.DirectSolver().solve, dovolumes=True)
        process(n, solution)
        
class FileOutput():
    
    def __init__(self, name, header, g, bounds, npoints):
        self.ftxt = open(name + ".txt", 'a')
        if header is not None: self.ftxt.write(header+'\n')
        self.ftxt.write(name.translate(None, string.punctuation + string.whitespace)+' = [')
        self.bounds = bounds
        self.npoints = npoints
        self.g = g
        self.docomma = False
    
    def process(self, n, solution):
        err = pos.comparetrue(self.bounds, self.npoints, self.g, solution)
        print n, err
        if self.docomma: self.ftxt.write(', ')
        self.docomma = True
        self.ftxt.write(str(err))
        
    def __del__(self):
        self.ftxt.write(']')
    

def analytichconvergence(maxN, k = 20, scale = 4.0):    
    fileroot = "hconv.k%s.scale%s"%(k,scale)
    bounds=np.array([[0,1],[0,1]],dtype='d')
    npoints=np.array([k * scale * 10,k * scale * 10], dtype=int)
    S = harmonic1(scale)
    g = HarmonicDerived(k, S)   
    nfn = NormOfGradient(S)
    bdycond = pcbd.dirichlet(g)
    
    npw = 15
    pdeg = 2
    Ns = range(1,maxN+1)
    
    pw = pcbv.PlaneWaveVariableN(pcb.circleDirections(npw))
    fo = FileOutput(fileroot + 'uniformpw%s'%npw, str(Ns), g, bounds, npoints)
    variableNhConvergence(Ns, nfn, bdycond, pw, fo.process, k, scale)
    
    poly = pcbr.ReferenceBasisRule(pcbr.Dubiner(pdeg))
    fo = FileOutput(fileroot + 'poly%s'%pdeg, str(Ns), g, bounds, npoints)
    variableNhConvergence(Ns, nfn, bdycond, poly, fo.process, k, scale, pdeg)

    for err in [0, 0.02, 0.2]:
        rt = PlaneWaveFromDirectionsRule(S, err)
        fo = FileOutput(fileroot + 'rt-err%s'%err, str(Ns), g, bounds, npoints)
        variableNhConvergence(Ns, nfn, bdycond, rt, fo.process, k, scale)
        for p in [1,2,3,4]:
            poly = pcbr.ReferenceBasisRule(pcbr.Dubiner(p))
            polyrt = pcb.ProductBasisRule(poly, rt)
            fo = FileOutput(fileroot + 'poly%srt-err%s'%(p,err), str(Ns), g, bounds, npoints)
            variableNhConvergence(Ns, nfn, bdycond, polyrt, fo.process, k, scale, p)


def showtruesoln(k, scale):
    S = harmonic1(scale)
    g = HarmonicDerived(k, S)   
    bounds=np.array([[0,1],[0,1]],dtype='d')
    npoints=np.array([k * scale * 10,k * scale * 10], dtype=int)
    pom.output2dfn(bounds, g.values, npoints)

#hconv.k20.scale4.0poly1rt-err0.02.txt
#hconv.k20.scale4.0poly1rt-err0.2.txt
#hconv.k20.scale4.0poly1rt-err0.txt
#hconv.k20.scale4.0poly2rt-err0.02.txt
#hconv.k20.scale4.0poly2rt-err0.2.txt
#hconv.k20.scale4.0poly2rt-err0.txt
#hconv.k20.scale4.0poly2.txt
#hconv.k20.scale4.0poly3rt-err0.02.txt
#hconv.k20.scale4.0poly3rt-err0.2.txt
#hconv.k20.scale4.0poly3rt-err0.txt
#hconv.k20.scale4.0poly4rt-err0.02.txt
#hconv.k20.scale4.0poly4rt-err0.2.txt
#hconv.k20.scale4.0poly4rt-err0.txt
#hconv.k20.scale4.0rt-err0.02.txt
#hconv.k20.scale4.0rt-err0.2.txt
#hconv.k20.scale4.0rt-err0.txt
#hconv.k20.scale4.0uniformpw15.txt

hconvk20scale40poly1rterr002 = [0.986718631153, 1.02431231616, 0.819760370047, 0.669048358688, 0.529358279946, 0.414762895219, 0.326324747597, 0.26274363575, 0.215249498698, 0.179797119802, 0.152452696576, 0.131685039852, 0.114596072113, 0.10087715005, 0.0897943277602, 0.0801144125555, 0.0720988797797, 0.0655521426627, 0.0596638723741, 0.0545372834254, 0.0501171453939, 0.0462169109135, 0.0427448816453, 0.0396228331401, 0.0368946447449, 0.0344107722244, 0.032151630389, 0.0301099437134, 0.0282505853756, 0.0265490191018]
hconvk20scale40poly1rterr02 = [1.00235177663, 1.01827817952, 0.849305713281, 0.724092898986, 0.641932489933, 0.516457940263, 0.403623585722, 0.331350590137, 0.254221100519, 0.24820096668, 0.219145517476, 0.176730825957, 0.166950132527, 0.149935678785, 0.129007986501, 0.112136417182, 0.0994271582684, 0.0866052526933, 0.0864234110393, 0.0801459930825, 0.0715112541347, 0.0655818795464, 0.0589776021917, 0.0590393679598, 0.050027183139, 0.0540603016866, 0.0491395319227, 0.0470076620818, 0.0410379895199, 0.0421745552671]
hconvk20scale40poly1rterr0 = [0.984736706182, 1.02012439689, 0.824563642078, 0.666966901158, 0.526840404383, 0.412835587336, 0.326417092817, 0.26245191646, 0.215088699273, 0.179484971086, 0.152306991433, 0.131092837831, 0.114188116044, 0.10059871374, 0.0893162634522, 0.0798753823714, 0.0718891165243, 0.0652562496375, 0.059493075124, 0.054326729356, 0.0499989070112, 0.0460298158059, 0.0425664986629, 0.0394889881187, 0.0366715474775, 0.0342192775655, 0.0319609054571, 0.0299245340108, 0.0280556402353, 0.026350597984]
hconvk20scale40poly2rterr002 = [0.961311122933, 0.619297766794, 0.19776268269, 0.0568021760024, 0.0234102869359, 0.0127826554462, 0.00789814871605, 0.00483832081309, 0.00328419542386, 0.00239639817892, 0.00167664269513, 0.00146765719406, 0.00110152219086, 0.00089119810683, 0.000655189131459, 0.000567178697442, 0.000480592833551, 0.000383583310452, 0.000300040848262, 0.00029890510672, 0.000231541840414, 0.000167673674443, 0.000157886420123, 0.0001307700506, 0.000106366632221, 0.000109877315759, 9.68108042438e-05, 7.24030486477e-05, 7.63869128318e-05, 7.05471325202e-05]
hconvk20scale40poly2rterr02 = [0.978804984817, 0.78294452048, 0.55414155838, 0.209075465027, 0.153293814783, 0.0965181772538, 0.0790706536018, 0.050050553891, 0.0268580511206, 0.0144996062566, 0.0137778125414, 0.0114939175037, 0.0118613704784, 0.00912389371826, 0.00853599438904, 0.00623443433708, 0.00595067852184, 0.00525416519509, 0.00393354560593, 0.00297289845612, 0.00231363881394, 0.00241392081504, 0.00220839486814, 0.00183346450931, 0.00147261226445, 0.00158038598324, 0.00107509575631, 0.00109071949814, 0.000998898416217, 0.00121689588723]
hconvk20scale40poly2rterr0 = [0.962184584664, 0.628605368182, 0.22294372822, 0.0694507646956, 0.0278020528692, 0.0139204109611, 0.00798249944225, 0.00500352569819, 0.00334870592801, 0.00235589994485, 0.00171759274245, 0.00128538777812, 0.000982337354838, 0.000763496300713, 0.000601920035434, 0.000480288010924, 0.00038658132396, 0.000315205343867, 0.000258613178778, 0.000213585064668, 0.000177582865523, 0.000148461658277, 0.000124865982903, 0.000105481506604, 8.96346733879e-05, 7.65666947776e-05, 6.56694276638e-05, 5.65871834598e-05, 4.8977172096e-05, 4.25341272874e-05]
hconvk20scale40poly2 = [1.00009132774, 1.00038459476, 0.99867289773, 0.995436863541, 0.992512587576, 0.986430485286, 0.976426577622, 0.966268114922, 0.956196171222, 0.94862816667, 0.944595831899, 0.92641859722, 0.89716439363, 0.858130970834, 0.82451404053, 0.775989558857, 0.738414097227, 0.700843908481, 0.664090943518, 0.62968494281, 0.5942555701, 0.556791503149, 0.518073852486, 0.479711265657, 0.442704443493, 0.407600701793, 0.374694504391, 0.34425157401, 0.316237878704, 0.290543730736]
hconvk20scale40poly3rterr002 = [0.964071958879, 0.663357419989, 0.13305867797, 0.048099246045, 0.0218173777655, 0.011210225902, 0.00660310357025, 0.00418463904358, 0.00295735022113, 0.002026357685, 0.00148897802174, 0.00109025981049, 0.000798555982405, 0.000579783585043, 0.000417865877135, 0.000305031198255, 0.000221563460423, 0.000164697484271, 0.000126429459461, 9.97312136382e-05, 8.04793599098e-05, 6.62833076175e-05, 5.61103910364e-05, 4.8250955658e-05, 4.18709592622e-05, 3.61165187129e-05, 3.13010454443e-05, 2.72545807308e-05, 2.39783223667e-05, 2.11914433879e-05]
hconvk20scale40poly3rterr02 = [1.00288938392, 1.03514129412, 0.340910723722, 0.101848436735, 0.0394375836517, 0.02160926137, 0.0119279394485, 0.00722746165434, 0.00646731668034, 0.00371211357837, 0.00275994395905, 0.00183733181877, 0.00159457411067, 0.00118145523501, 0.000927828024353, 0.000708529000382, 0.000401978264165, 0.000405344888315, 0.000259299279127, 0.0002277585248, 0.000187254405879, 0.000149702548815, 0.000165977237237, 0.000125008324818, 0.000128647175806, 8.44974598035e-05, 9.68873695201e-05, 6.84915870968e-05, 7.63780397587e-05, 5.18473594082e-05]
hconvk20scale40poly3rterr0 = [0.962550032403, 0.654907043047, 0.132937360945, 0.0479181540164, 0.0217688345836, 0.0112362900653, 0.00656984341615, 0.00418072330531, 0.002963000742, 0.00202107967775, 0.00148484823686, 0.00108121574827, 0.000791423233056, 0.000574032016604, 0.000414114501904, 0.000302092435721, 0.000219877492388, 0.000164186887795, 0.000126113420315, 9.9693697154e-05, 8.03455316692e-05, 6.63306122215e-05, 5.61322345508e-05, 4.83128110885e-05, 4.1803904894e-05, 3.60764257116e-05, 3.12314564617e-05, 2.72275961544e-05, 2.3913323322e-05, 2.11522217602e-05]
hconvk20scale40poly4rterr002 = [1.10444863505, 0.357437886164, 0.0137793068407, 0.00196705244754, 0.000593979163731, 0.000227151735471, 0.000151834283235, 0.000125389079606, 7.52725796109e-05, 4.84708384458e-05, 2.4994108069e-05, 1.90585131584e-05, 1.39405287984e-05, 1.3243847944e-05, 9.56022033815e-06, 3.32274066942e-06, 2.23385851041e-06, 1.78040858554e-06, 1.59862897027e-06, 1.2330366981e-06, 1.27215292084e-06, 7.88309462337e-07, 9.16269797462e-07, 4.2937900031e-07, 4.70865268616e-07, 2.27960526598e-07, 1.69154575187e-07, 1.59124125668e-07, 1.20325523803e-07, 8.31413885715e-08]
hconvk20scale40poly4rterr02 = [0.960796420412, 0.265470189116, 0.0693487982421, 0.0284865370698, 0.0111665821844, 0.00475236672442, 0.00186848273799, 0.00236696068815, 0.00113226671769, 0.000618584185227, 0.000514985581089, 0.000281995182661, 0.000224492989694, 0.000183464433542, 0.000116485337285, 7.01824501236e-05, 4.77547462219e-05, 3.9963440057e-05, 1.88066996269e-05, 2.54905272839e-05, 2.51456867128e-05, 3.76173894575e-05, 1.9594654021e-05, 1.12514732191e-05, 9.11527862105e-06, 6.55894237253e-06, 4.89571769257e-06, 2.22735664301e-06, 2.52956910528e-06, 2.01409942944e-06]
hconvk20scale40poly4rterr0 = [1.09660255646, 0.352210571394, 0.0147823767407, 0.00228856564452, 0.000576260826328, 0.000207553856035, 0.000104384143817, 5.25396169664e-05, 2.69600608017e-05, 1.50674384959e-05, 7.21803632037e-06, 4.95219169142e-06, 2.82132988427e-06, 2.45965633644e-06, 1.45664815947e-06, 7.50154587685e-07, 5.88182191624e-07, 4.24518774911e-07, 2.74495483128e-07, 1.95191318333e-07, 1.67943997933e-07, 1.56924769404e-07, 1.20608856307e-07, 8.14179521642e-08, 5.68520884266e-08, 4.17330177007e-08, 3.1767018024e-08, 2.47927471096e-08, 1.97061751305e-08, 1.58807303073e-08]
hconvk20scale40rterr002 = [0.998016012868, 0.999739754268, 0.849675625999, 0.655722684256, 0.422456510488, 0.305273605655, 0.246414355861, 0.196087807737, 0.165343783477, 0.155664173633, 0.130235236558, 0.129093361369, 0.122112760013, 0.115579818594, 0.107208423762, 0.101327445547, 0.0968750925498, 0.092493515824, 0.0932701106994, 0.0887926224314, 0.0842979660974, 0.0800276748719, 0.0797225737358, 0.0765756227226, 0.0697081403632, 0.0708557653179, 0.0660323098457, 0.0686342226033, 0.063797710626, 0.0637175924136]
hconvk20scale40rterr02 = [1.01417952281, 0.958109874908, 0.957452399545, 0.880411190434, 0.84758688276, 0.877596804555, 0.698341530601, 0.756702675992, 0.680731511076, 0.650371404235, 0.669770620697, 0.616473363189, 0.606975663719, 0.571957756551, 0.558324480294, 0.557754394576, 0.545508191375, 0.513147143565, 0.49293790749, 0.514311898207, 0.496161615422, 0.456186471978, 0.483143264267, 0.464132846404, 0.472795028289, 0.447723653567, 0.465264400112, 0.438352305682, 0.420823430222, 0.44512858164]
hconvk20scale40rterr0 = [0.992913936668, 1.00119415164, 0.866514175148, 0.632957391559, 0.431015462296, 0.301012277585, 0.22388216418, 0.177942013733, 0.149611086905, 0.131057240211, 0.118219782374, 0.108723497096, 0.10131887697, 0.0954205313417, 0.0903470956627, 0.0859289038125, 0.0821792090078, 0.0788631484759, 0.0759083041998, 0.0729999182647, 0.0706310229168, 0.0682302463688, 0.0660581499781, 0.0640912138643, 0.062138453166, 0.0604446042903, 0.0588051093013, 0.0572707457044, 0.0558014496598, 0.0544082644765]
hconvk20scale40uniformpw15 = [1.0234037976, 1.0955093305, 1.09411538088, 1.33408673069, 1.08139693632, 0.640342896836, 0.473668316911, 0.37977156001, 0.262282538183, 0.243985753093, 0.164647135621, 0.155424600351, 0.0980139230503, 0.162918896495, 0.0777292963231, 0.0751822767676, 0.0692256718352, 0.0632265437212, 0.0595292852917, 0.0556402573117, 0.0513264293981, 0.0468186644961, 0.0423405275195, 0.0381115849409, 0.0341970075962, 0.0306254638823, 0.027444639522, 0.0246250034439, 0.0221418757447, 0.0199569487429]

def plotanalytic():
    h = 1.0 / np.arange(1, 31)
    mp.loglog(h, uniformpw15)
    mp.figure()
    mp.loglog(h, np.transpose([hconvk20scale40rterr0, hconvk20scale40poly1rterr0, hconvk20scale40poly2rterr0, hconvk20scale40poly3rterr0, hconvk20scale40poly4rterr0]))


import pypwdg.parallel.main



if __name__ == '__main__':
    pass    
    analytichconvergence(32)
    #showtruesoln(20,4.0)
    
    
    
    